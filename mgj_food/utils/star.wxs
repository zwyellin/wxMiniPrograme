
var cart = {
	itemClasses: function(num) {
		var arr = [];
		var stars = Math.floor(num*2) / 2;
		var hasDecimal = stars % 1!== 0;
		var integer=Math.floor(stars);
		for (var i = 0; i <integer; i++) {
			arr.push('on');		
		}
		if (hasDecimal) {
			arr.push('half');
		}
		for (var i = arr.length; i <5; i++) {
			arr.push('off');
		}
		return arr;
	},
	fomatFloat: function(src,pos){
		if (src.toString().length == 1) return src + '.0';
       	return Math.round(src*Math.pow(10, pos))/Math.pow(10, pos);   
    },
    shopFloat: function(src,pos) {
    	return Math.round(src*Math.pow(10, pos))/Math.pow(10, pos);  
    },
	praise:function(goodCommentNum,CommentNum) {
		var praise = goodCommentNum/CommentNum;
			praise = praise*100;
			praise = parseInt(praise);
		return praise;
	},
	removefh:function(filepath,width,height){
		if (filepath && typeof filepath == 'string') {
			var img = filepath.split(';',1);
			return img[0] + '?imageView2/0/w/'+ width + '/h/'+height;
		} else {
			return '/images/merchant/merchantLogo.png';
		}
	},
	strReplace:function(str){
		//要替换为*号的内容
		var tmp=str.substring(1,str.length-1);
		//将其替换
		var content=str.replace(tmp,'****');
		return content;
	},
	round:function(num){
		var str = parseFloat(num/1000);
			str = str.toFixed(2);
		return str;
	},
	splitStr: function(str){
		return str.split('|*|');
	},
	//计算购物车中当前产品的数量
	getCount: function (cartlist, id) {
	    var count = 0;
	    if (id) {
	      for (var i = 0; i < cartlist.length; i++) {
	        if (cartlist[i].id == id) {
	          count+= cartlist[i].count;
	        }
	      }
	    }
	    return count;
	},
	//计算订单中产品的总数
	getCartCount: function (cartlist) {
	    var count = 0;
	    for (var i = 0; i < cartlist.length; i++) {
	      count += cartlist[i].quantity;
	    }
	    return count;
	},
	//计算订单中某一分类下产品的总数
	getItemCount: function (id,cartlist) {
	    var count = 0;
	    if (id === null) return 0;
	    for (var i = 0; i < cartlist.length; i++) {
	        if (cartlist[i].categoryId == id) {
	          count+= cartlist[i].count;
	        }
	    }
	    return count;
	},
	//计算同一商品下不同规格的商品添加的数量
	getstandard:function (selectedFood,specIndex,cartlist) {
		var count = 0;
		var attributes = '';
		var isFound = false;
		var priceObject = selectedFood.goodsSpecList[specIndex];
		for (var i = 0; i < selectedFood.goodsAttributeList.length; i++) {
			if (i === selectedFood.goodsAttributeList.length-1) {
				attributes += selectedFood.goodsAttributeList[i].select;
			} else {
				attributes += selectedFood.goodsAttributeList[i].select+',';
			}
		}
		for (var i = 0; i < cartlist.length; i++) {
			if (cartlist[i].priceObject.id == priceObject.id) {
        		if (cartlist[i].attributes ==  attributes) {            //规格判断
					count = cartlist[i].count;
					isFound = true;	
        		}
            }
		}
		return count;
	},
	//计算该商家下购物车里产品的总数
	getMerchantCount: function (id,cartObject) {
		if (cartObject === null) return 0;
	    var count = 0;
	    id = id.toString();
	    var cartList = cartObject[id];
	    if (cartList) {
	    	for (var i = 0; i < cartList.length; i++) {
				count+= cartList[i].count;
  			}
  			// count = count + 1
	    }
	    return count;
	},
	payDesc: function(totalprice,minprice) {
		if (totalprice===0) {
			return '¥' + minprice+'元起送';
		}else if(totalprice < minprice){
			var dif=minprice - totalprice;
			console.log(dif);
			return '还差¥'+ cart.shopFloat(dif,2) + '元';
		}else{
			return '去结算';
		}
	},
	fullItemNum:function(food,cartlist){
		var count = 0;
		var attributes = food.attributes;
		var priceObject = food.priceObject;
		for (var i = 0; i < cartlist.length; i++) {
			if (cartlist[i].priceObject.id == priceObject.id) {
        		if (cartlist[i].attributes ==  attributes) {            //规格判断
					count = cartlist[i].count;		
        		} else {
        			count = cartlist[i].count;
        		}
            }
		}
		return count;
	},
	price:function(food){
		var price = 0;
		var totalPrice = 0;
		if(food.hasDiscount){
			if (food.surplusDiscountStock > food.everyGoodsEveryOrderBuyCount) {
				if (food.everyGoodsEveryOrderBuyCount === 0) {
					if (food.count > food.surplusDiscountStock) {
						price = food.priceObject.price*food.surplusDiscountStock;
						totalPrice = food.priceObject.originalPrice*(food.count - food.surplusDiscountStock) + price;
					} else {
						totalPrice = food.priceObject.price*food.count;
					}
				} else {
					if (food.count > food.everyGoodsEveryOrderBuyCount) {
						price = food.priceObject.price*food.everyGoodsEveryOrderBuyCount;
						totalPrice = food.priceObject.originalPrice*(food.count - food.everyGoodsEveryOrderBuyCount) + price;
					}else {
						totalPrice = food.priceObject.price*food.count;
					}	
				}	
			} else {
				if(food.count > food.surplusDiscountStock){
					price = food.priceObject.price*food.surplusDiscountStock;
					totalPrice = food.priceObject.originalPrice*(food.count - food.surplusDiscountStock) + price;
				}else {
					totalPrice = food.priceObject.price*food.count;
				}
			}
		}else{
			totalPrice = parseFloat(food.priceObject.price)*food.count;
		}
		return Math.round(totalPrice*Math.pow(10, 2))/Math.pow(10, 2);
	}
};

module.exports = {
  itemClasses: cart.itemClasses,
  fomatFloat: cart.fomatFloat,
  shopFloat:cart.shopFloat,
  praise: cart.praise,
  splitStr:cart.splitStr,
  getCount:cart.getCount,
  getCartCount:cart.getCartCount,
  getItemCount:cart.getItemCount,
  getstandard:cart.getstandard,
  getMerchantCount:cart.getMerchantCount,
  strReplace:cart.strReplace,
  payDesc:cart.payDesc,
  round:cart.round,
  removefh:cart.removefh,
  fullItemNum:cart.fullItemNum,
  price:cart.price
};